<<<<<<< HEAD
demo()
q()
q()
q()
load("~/.RData")
# Visualisation des données et de la ligne de régression
plot(heures_etude, scores_exam, main = "Régression linéaire : Heures d'étude vs Scores",
xlab = "Heures d'étude", ylab = "Scores à l'examen")
# Générer des données aléatoires
set.seed(123)  # Pour la reproductibilité
heures_etude <- rnorm(100, mean = 20, sd = 5)  # 100 valeurs aléatoires pour les heures d'étude
scores_exam <- 50 + 3 * heures_etude + rnorm(100, mean = 0, sd = 10)  # Scores examens basés sur les heures d'étude
# Calculer la corrélation entre les heures d'étude et les scores
correlation <- cor(heures_etude, scores_exam)
print(paste("Corrélation entre heures d'étude et scores :", correlation))
# Ajuster un modèle de régression linéaire
modele_regression <- lm(scores_exam ~ heures_etude)
# Résumé du modèle de régression
summary(modele_regression)
# Visualisation des données et de la ligne de régression
plot(heures_etude, scores_exam, main = "Régression linéaire : Heures d'étude vs Scores",
xlab = "Heures d'étude", ylab = "Scores à l'examen")
abline(modele_regression, col = "red")
# Données pour les deux groupes
groupeA <- c(5, 8, 10, 12, 15, 9, 11, 14, 16, 20)
groupeB <- c(7, 9, 11, 13, 16, 6, 10, 12, 18, 22)
# Effectuer le test de Mann-Whitney
resultat <- wilcox.test(groupeA, groupeB, exact = FALSE)
# Afficher les résultats
print(resultat)
# Données pour les deux groupes
groupeA <- c(5, 8, 10, 12, 15, 9, 11, 14, 16, 20)
groupeB <- c(7, 9, 11, 13, 16, 6, 10, 12, 18, 22)
# Effectuer le test de Mann-Whitney
resultat <- wilcox.test(groupeA, groupeB, exact = FALSE)
# Afficher les résultats
print(resultat)
data <- readxl::excel_format("./Data/BASEDEDONNEE.xlsx, sep=';', dec=',', header=TRUE")
data
data <- read.table(file = "./Data/BASEDEDONNEE.xlsx, sep=';', dec=',', header=TRUE")
print("Hello word")
revenus <- c(500, 475, 150, 255, 350, 125, 700, 680, 215, 955, 375, 450)
mois <- c('jan', 'feb', 'mar', 'avr', 'mai', 'jun', 'jul', 'aout', 'sep', 'oct', 'nov', 'dec')
names(revenus)
revenus
revenus <- c(500, 475, 150, 255, 350, 125, 700, 680, 215, 955, 375, 450)
mois <- c('jan', 'feb', 'mar', 'avr', 'mai', 'jun', 'jul', 'aout', 'sep', 'oct', 'nov', 'dec')
names(revenus) <- mois
print(revenus)
revenus <- c(500, 475, 150, 255, 350, 125, 700, 680, 215, 955, 375, 450)
mois <- c('jan', 'feb', 'mar', 'avr', 'mai', 'jun', 'jul', 'aout', 'sep', 'oct', 'nov', 'dec')
names(revenus) <- mois
revenus <- revenus + 50
print(revenus)
sum(revenus)
mean(revenus)
cor(revenus)
cor(revenus, mois)
revenus['avr']
revenus['avr': 'nov']
revenus['avr','nov']
revenus['nov']
rev_revenus<- revenus['feb':oct]
rev_revenus<- revenus['feb':'oct']
rev_revenus<- revenus[2:8]
rev_revenus
*Ctrl+Shift+Enter*.
#Inportation et nettoyage des données
```{r}
clearPushBack()
cls
help()
source("D:/Modeles/modele_diabetes.Rmd")
source("D:/Modeles/modele_diabetes.Rmd", echo=TRUE)
data <- read.csv("D:\Modeles\archive (3)diabetes.csv")
data <- read.csv("D:\Modeles\archive (3)diabetes.csv")
data <- read.csv("D:/Modeles/archive (3)diabetes.csv")
data <- read.csv("D:/Modeles/archive (3)/diabetes.csv")
data <- read.csv("D:/Modeles/archive (3)/diabetes.csv")
clear()
delete.response()
data <- read.csv("D:/Modeles/archive (3)/diabetes.csv")
head(data)
head(data)
str(data)
data$Outcome <- as.factor(data$Outcome)
str(data)
summary(data)
str(data)
trainIndex
#Créer un indice pour partitionner les données (80% d'entrainement et 20% de test)
trainIndex <- createDataPartition(data$Outcome, p =0.8, list = FALSE)
trainIndex
#installer et charger le packge caret si neccessaire
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
library(caret)
#Definir un speed pour la reproductibilité
set.seed(123)
#Créer un indice pour partitionner les données (80% d'entrainement et 20% de test)
trainIndex <- createDataPartition(data$Outcome, p =0.8, list = FALSE)
#installer et charger le packge caret si neccessaire
if (!requireNamespace("caret", "ggplot2", "lattice", quietly = TRUE)) {
install.packages("caret")
}
library(caret)
#Definir un speed pour la reproductibilité
set.seed(123)
#Créer un indice pour partitionner les données (80% d'entrainement et 20% de test)
trainIndex <- createDataPartition(data$Outcome, p =0.8, list = FALSE)
install.packages(c("ggplot2", "lattice"))
library(ggplot2)
library(lattice)
install.packages(c("ggplot2", "lattice"))
install.packages(c("ggplot2", "lattice"))
library(ggplot2)
library(lattice)
#installer et charger le packge caret si neccessaire
if (!requireNamespace("caret", "ggplot2", "lattice", quietly = TRUE)) {
install.packages("caret")
}
library(caret)
#Definir un speed pour la reproductibilité
set.seed(123)
#Créer un indice pour partitionner les données (80% d'entrainement et 20% de test)
trainIndex <- createDataPartition(data$Outcome, p =0.8, list = FALSE)
trainIndex
#Diviser les données en enssemble d'entrainement et de test
datatrain <- data[trainIndex,]
datatest <- data[-trainIndex]
#Afficher les dimenssion des enssembles d'entrainement et de test
cat("Dimension de l'ensemble d'entrainement : ", dim(datatrain), "\n")
cat("Dimension de l'ensemble de test : ", dim(datatest), "\n")
#Diviser les données en enssemble d'entrainement et de test
datatrain <- data[trainIndex,]
datatest <- data[-trainIndex]
#Afficher les dimenssion des enssembles d'entrainement et de test
cat("Dimension de l'ensemble d'entrainement : ", dim(datatrain), "\n")
cat("Dimension de l'ensemble de test : ", dim(datatest),)
#Diviser les données en enssemble d'entrainement et de test
datatrain <- data[trainIndex,]
datatest <- data[-trainIndex]
#Afficher les dimenssion des enssembles d'entrainement et de test
cat("Dimension de l'ensemble d'entrainement : ", dim(datatrain), "\n")
cat("Dimension de l'ensemble de test : ", dim(datatest))
#Diviser les données en enssemble d'entrainement et de test
datatrain <- data[trainIndex,]
datatest <- data[-trainIndex,]
#Afficher les dimenssion des enssembles d'entrainement et de test
cat("Dimension de l'ensemble d'entrainement : ", dim(datatrain), "\n")
cat("Dimension de l'ensemble de test : ", dim(datatest))
Modele arbre de decision
##Modele arbre de decision
```{r}
# Installer et charger les bibliotheques néccesssaire
if(!requireNamespace("rpart", quietly = TRUE)) {
install.packages("rpart")
}
if(!requireNamespace("rpart.plot", quietly = TRUE)){
install.packages("rpart.plot")
}
library(rpart)
library(rpart.plot)
# contruire l'arbre de decision
treeModel <- rpart(Outcome ~ ., data = datatrain, method = "class")
# Afficher un resumé du modèle
summary(treeModel)
# visualiser l'abre de decision
rpart.plot(treeModel, main = "Arbre de decission ~ Modele de Diabete")
data <- read.csv("D:/Modeles/archive (3)/diabetes.csv")
head(data)
str(data)
data$Outcome <- as.factor(data$Outcome)
data$Outcome <- as.factor(data$Outcome)
summary(data)
str(data)
#installer et charger le packge caret si neccessaire
if (!requireNamespace("caret", "ggplot2", "lattice", quietly = TRUE)) {
install.packages("caret")
}
library(caret)
#Definir un speed pour la reproductibilité
set.seed(123)
#Créer un indice pour partitionner les données (80% d'entrainement et 20% de test)
trainIndex <- createDataPartition(data$Outcome, p =0.8, list = FALSE)
install.packages(c("ggplot2", "lattice"))
library(ggplot2)
library(lattice)
trainIndex
#Diviser les données en enssemble d'entrainement et de test
datatrain <- data[trainIndex,]
datatest <- data[-trainIndex,]
#Afficher les dimenssion des enssembles d'entrainement et de test
cat("Dimension de l'ensemble d'entrainement : ", dim(datatrain), "\n")
cat("Dimension de l'ensemble de test : ", dim(datatest), "\n")
# Importation de la bibliotheque pour afficher l'histogramme
package(ggplot2)
# Importation de la bibliotheque pour afficher l'histogramme
library(ggplot2)
setwd("D:/groupe_10/task_2")
# Importation de la base de Donnée
data = "Housing.csv"
# Importation de la base de Donnée
data <- read.csv("Housing.csv")
head(data)
head(data)
library(ggplot2)
head(data)
library(ggplot2)
data <- read.csv("Housing.csv")
head(data)
source("D:/groupe_10/task_2/hist.R", echo=TRUE)
library(ggplot2)
```{r}
data <- read.csv("Housing.csv")
head(data)
head(data)
colnames(data)
sum(is.na(data$bedrooms))
hist(data$bedrooms)
hist(data$bedrooms, breaks = 10, col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 6, col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 20, col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 6, col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 8 , col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 10 , col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 20 , col = "blue",main = "Histograme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 10 , col = "blue",main = "Histogramme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
hist(data$bedrooms, breaks = 10 , col = "blue",main = "Histogramme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
=======
data <- read.csv("Housing.csv")
#Prendre connaissance avec le dataset
head(data)
dim(data)
#Graphique de dispersion
library(ggplot2)
ggplot(data, aes(x=area, y=price)) + geom_point()
+ labs(title="AREA vs PRICE", x="area", y="price")
cor(area, price)
cor(data$price, data$area)
ggplot(data, aes(x=NOX, y=INDUS)) + geom_point() + labs(title="NOX vs INDUS", x="NOX", y="INDUS")
data <- read.csv("BostonHousing.csv")
library(ggplot2)
ggplot(data, aes(x=area, y=price)) + geom_point()
+ labs(title="AREA vs PRICE", x="area", y="price")
ggplot(data, aes(x=area, y=price)) + geom_point()
+ labs(title="area vs price", x="area", y="price")
ggplot(data, aes(x=area, y=price)) + geom_point() + labs(title="area vs price", x="area", y="price")
>>>>>>> 08a828c10b009136d3c498c3fcbbebf7fd039f80
library(ggplot2)
data <- read.csv("Housing.csv")
head(data)
colnames(data)
sum(is.na(data$bedrooms))
hist(data$bedrooms, breaks = 10 , col = "blue",main = "Histogramme des chambres", xlab = "nbre de chambre", ylab = "Frequence" )
